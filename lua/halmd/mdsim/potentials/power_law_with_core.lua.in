--
-- Copyright © 2011  Michael Kopp and Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local device            = require("halmd.device")
local module            = require("halmd.utility.module")
local mdsim = {
    particle            = require("halmd.mdsim.particle")
}

-- grab C++ wrappers
local power_law_with_core_wrapper = {
    host = libhalmd.mdsim.host.potentials.power_law_with_core
}
if libhalmd.mdsim.gpu then
    power_law_with_core_wrapper.gpu = libhalmd.mdsim.gpu.potentials.power_law_with_core
end
local h5 = libhalmd.h5
local po = libhalmd.po
-- grab standard library
local assert = assert

local M = module("halmd.mdsim.potentials.power_law_with_core")

local fixed_array = {__index = function() return 0 end}

--
-- construct power law module
--
function M.__new(args)
    local cutoff  = setmetatable(args.cutoff  or {2.5, 2.5, 2.5 }, fixed_array) -- default value
    local core    = setmetatable(args.core    or {0.5, 0.5, 0.5 }, fixed_array) -- default value
    local epsilon = setmetatable(args.epsilon or {1.0, 1.5, 0.5 }, fixed_array) -- default value
    local sigma   = setmetatable(args.sigma   or {1.0, 0.8, 0.88}, fixed_array) -- default value
    local index   = setmetatable(args.index   or { 12,  12,   12}, fixed_array) -- default value
    local smooth  = args.smooth or 0 -- default value

    local particle = mdsim.particle() -- singleton
    local logger = assert(args.logger)

    local power_law_with_core
    if device() then
        power_law_with_core = assert(power_law_with_core_wrapper.gpu)
    else
        power_law_with_core = assert(power_law_with_core_wrapper.host)
    end
    potential = power_law_with_core(particle.ntype, cutoff, core, epsilon, sigma, index, logger)

    -- store smooth parameter as property of potential
    potential.smooth = property(function(self) return smooth end)

    return potential
end

--
-- returns module description
--
function M.description()
    return "power law potential with hard core"
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function M.options(desc)
    desc:add("cutoff", po.float_array(), "cutoff radius [in units of sigma]")
    desc:add("core", po.float_array(), "radius of hard core [in units of sigma]")
    desc:add("epsilon", po.float_array(), "interaction strength [MD units]")
    desc:add("sigma", po.float_array(), "interaction range [MD units]")
    desc:add("index", po.uint_array(), "power law index")
    desc:add("smooth", po.float(), "smoothing parameter for C²-continuous cutoff")
end

--
-- read module parameters from HDF5 group
--
function M.read_parameters(args, group)
    args.cutoff = group:read_attribute("cutoff", h5.float_array())
    args.core = group:read_attribute("core", h5.float_array())
    args.epsilon = group:read_attribute("epsilon", h5.float_array())
    args.sigma = group:read_attribute("sigma", h5.float_array())
    args.index = group:read_attribute("index", h5.uint_array())
    args.smooth = group:read_attribute("smooth", h5.float())
end

--
-- write module parameters to HDF5 group
--
-- @param power_law_with_core module instance
-- @param group HDF5 group
--
function M.write_parameters(power_law_with_core, group)
    group:write_attribute("cutoff",     h5.float_array(), power_law_with_core.r_cut_sigma:data())
    group:write_attribute("core",       h5.float_array(), power_law_with_core.r_core_sigma:data())
    group:write_attribute("epsilon",    h5.float_array(), power_law_with_core.epsilon:data())
    group:write_attribute("sigma",      h5.float_array(), power_law_with_core.sigma:data())
    group:write_attribute("index",      h5.uint_array(),  power_law_with_core.index:data())
    group:write_attribute("smooth",     h5.float(),       power_law_with_core.smooth)
end

return M
