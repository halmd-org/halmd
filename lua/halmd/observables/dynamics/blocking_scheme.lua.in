--
-- Copyright © 2011-2014 Felix Höfling
-- Copyright © 2015      Nicolas Höft
-- Copyright © 2011-2012 Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local log           = require("halmd.io.log")
local clock         = require("halmd.mdsim.clock")
local sampler       = require("halmd.observables.sampler")
local utility       = require("halmd.utility")
local module        = require("halmd.utility.module")
local profiler      = require("halmd.utility.profiler")

---
-- Blocking Scheme
-- ===============
--

-- grab C++ wrappers
local blocking_scheme = assert(libhalmd.observables.dynamics.blocking_scheme)
local blocking_sample = assert(libhalmd.observables.samples.blocking_scheme)
local correlation = assert(libhalmd.observables.dynamics.correlation)

---
-- Construct blocking scheme.
--
-- :param args: keyword arguments
-- :param number args.max_lag: maximum lag time in MD units
-- :param number args.every: sampling interval of lowest coarse-graining level in integration steps
-- :param number args.size: size of each block, determines coarse-graining factor
-- :param number args.shift: coarse-graining shift between odd and even levels
--      (*default:* :math:`\lfloor\sqrt\text{size}\rfloor`)
-- :param number args.separation: minimal separation of samples for time
--      averages in sampling steps (*default:* -- :math:`\text{every}\times\text{size}`)
-- :param number args.flush: interval in seconds for flushing the accumulated
--      results to the file (*default:* 900)
--
-- .. method:: disconnect()
--
--    Disconnect blocking scheme from sampler.
--
-- .. class:: correlation(args)
--
--    Compute time correlation function.
--
--    :param table args: keyword arguments
--    :param args.tcf: time correlation function
--    :param args.file: instance of :class:`halmd.io.writers.h5md`
--    :param args.location: location within file *(optional)*
--    :type args.location: string table
--
--    The argument ``tcf`` specifies the time correlation function. It is
--    expected to provide the attributes ``acquire`` (1 or 2 callables that
--    yield the samples to be correlated) and ``desc`` (module description) as
--    well as a method ``writer`` (file writer). Suitable modules are found in
--    :mod:`halmd.observables.dynamics`, see there for details.
--
--    The argument ``location`` specifies a path in a structured file format
--    like H5MD given as a table of strings. If omitted it is defined by the
--    time correlation function, typically {``"dynamics"``, particle group,
--    name of correlation function}.
--
--    .. method:: disconnect()
--
--       Disconnect correlation function from blocking scheme.
--
local M = module(function(args)
    local max_lag = utility.assert_type(utility.assert_kwarg(args, "max_lag"), "number")
    local every = utility.assert_type(utility.assert_kwarg(args, "every"), "number")
    local size = utility.assert_type(args.size, "number")
    local shift = utility.assert_type(args.shift or math.floor(math.sqrt(size)), "number")
    local separation = utility.assert_type(args.separation or every * size, "number")
    local resolution = every * assert(clock.timestep)
    local flush = utility.assert_type(args.flush or 900, "number")
    local logger = log.logger({label = "blocking_scheme"})

    -- construct instance
    local self = blocking_scheme(clock, max_lag, resolution, size, shift, separation, logger)

    self.correlation = function(self, args)
        local tcf = utility.assert_kwarg(args, "tcf")
        local file = utility.assert_kwarg(args, "file")
        local location = args.location -- may be nil

        local desc = assert(tcf.desc)
        local acquire = assert(tcf.acquire)
        -- convert single acquisitor to a table
        if not (type(acquire) == "table") then
            acquire = { acquire }
        end

        -- emit notification to blocking_scheme logger
        logger:info("register " .. desc)
        -- switch to tcf-specific logger
        local logger = log.logger({label = desc})

        -- construct blocking sample(s) from acquire() function(s)
        local count = assert(self.count)
        local size = assert(self.block_size)
        local sample = {}
        for i,fcn in ipairs(acquire) do
            sample[i] = blocking_sample(fcn, count, size)
        end

        -- construct correlation function for blocking scheme
        local result = correlation(tcf, sample[1], sample[#sample], logger)

        -- sequence of signal connections
        local conn = {}
        result.disconnect = utility.signal.disconnect(conn, "correlation function")

        -- enable auxiliary variable calculation, if necessary for correlation function
        if tcf.aux_enable then
            local particles = utility.assert_type(tcf.aux_enable, "table")
            for i,p in ipairs(particles) do
                table.insert(conn, sampler:on_prepare(function()
                    if self:next() == clock.step then
                        p:aux_enable()
                    end
                end, 1, clock.step))
            end
        end

        -- write correlation function results
        assert(tcf.writer)
        local writer = tcf:writer({file = file, location = location})
        -- the parentheses are needed since on_write returns a tuple
        table.insert(conn, (writer:on_write(self.time, {"time"}))) -- FIXME hardlink
        table.insert(conn, (writer:on_write(result.mean, {"value"})))
        table.insert(conn, (writer:on_write(result.error, {"error"})))
        table.insert(conn, (writer:on_write(result.count, {"count"})))

        -- connect correlation function to blocking scheme and profiler
        for i,s in ipairs(sample) do
            table.insert(conn, self:on_sample(s))
        end
        table.insert(conn, self:on_correlate(result))
        table.insert(conn, self:on_append_finalise(writer.write))
        table.insert(conn, profiler:on_profile(assert(result.runtime).tcf, desc))

        -- periodically write current values of accumulated results
        table.insert(conn, utility.timer_service:on_periodic(writer.write, flush, 0))

        return result
    end

    -- sequence of signal connections
    local conn = {}
    self.disconnect = utility.signal.disconnect(conn, "blocking scheme")

    -- connect blocking scheme to sampler
    table.insert(conn, sampler:on_sample(self.sample, every, clock.step))
    table.insert(conn, sampler:on_finish(self.finalise))
    logger:info("sampling interval in integration steps: " .. every)

    return self
end)

return M
