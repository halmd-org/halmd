--
-- Copyright © 2013      Nicolas Höft
-- Copyright © 2013-2014 Felix Höfling
-- Copyright © 2012      Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local utility = require("halmd.utility")
local module  = require("halmd.utility.module")

---
-- Correlation Function
-- ====================
--
-- This module permits the implementation of a user-defined time correlation
-- function within the Lua simulation script.
--
-- The following example shows the use of this module together with
-- :class:`halmd.observables.dynamics.blocking_scheme` to determine the
-- mean-square displacement of the centre of mass of a certain particle group.
-- From this, the collective self-diffusion constant may be obtained.  The
-- centre of mass is computed efficiently by
-- :meth:`halmd.observables.thermodynamics.center_of_mass`, the squared
-- displacement is then computed by the script function passed as
-- ``correlate``. ::
--
--     local msv = observables.thermodynamics({box = box, group = group, force = force})
--     local collective_msd = dynamics.correlation({
--         -- acquire centre of mass
--         acquire = function()
--             return msv:center_of_mass()
--         end
--         -- correlate centre of mass at first and second point in time
--         , correlate = function(first, second)
--             local result = 0
--             for i = 1, #first do
--                 result = result + math.pow(second[i] - first[i], 2)
--             end
--             return result
--         end
--         -- module description
--         , desc = "collective mean-square displacement of AA particles"
--     })
--
--     local blocking_scheme = dynamics.blocking_scheme({
--         max_lag = max_lag
--         , every = 100
--         , size = 10
--         , separation = separation
--     })
--     blocking_scheme:correlation({
--         tcf = collective_msd, file = file
--       , location = {"dynamics", "AA", "collective_mean_square_displacement"}
--     })
--

-- grab C++ wrappers
local correlation_adaptor = assert(libhalmd.observables.dynamics.correlation_adaptor)
local blocking_scheme_adaptor = assert(libhalmd.observables.samples.blocking_scheme_adaptor)

---
-- Construct user-defined correlation function.
--
-- :param args: keyword arguments
-- :param args.acquire: callable(s) that return a (multi-dimensional) value
-- :param args.correlate: callable that accepts two values and returns a ``number`` or a numeric ``table``
-- :param args.shape: array shape of the result (*optional*)
-- :type args.shape: number table
-- :param args.location: default location within file
-- :type args.location: string table
-- :param string args.desc: module description
-- :param table args.aux_enable: sequence of :class:`halmd.mdsim.particle` instances *(optional)*
--
-- The argument ``acquire`` is a callable or a table of up to 2 callables that
-- yield the samples to be correlated.
--
-- The argument ``shape`` specifies the array shape of the outcomes of
-- ``correlate``. It is only required if the result is a ``table``. Currently,
-- only 1-dimensional arrays are supported, for which ``shape = { size }``.
--
-- The argument ``location`` defines the default value of ``writer()``. For
-- H5MD files, it obeys the structure {``"dynamics"``, particle group, name of
-- correlation function}.
--
-- The parameter ``aux_enable`` is useful if ``acquire()`` depends on one of
-- the auxiliary force variables, see :meth:`halmd.mdsim.particle.aux_enable`
-- for details. In sampling steps of the correlation function, each ``particle``
-- instance listed in ``aux_enable`` is notified to update the auxiliary
-- variables before the sampling step. Thereby, redundant force calculations
-- can be avoided.
--
-- .. method:: acquire()
--
--    Acquire sample(s).
--
--    :returns: sample
--
-- .. method:: correlate(first, second)
--
--    Correlate two samples.
--
--    :param first: first sample
--    :param second: second sample
--    :returns: value
--
-- .. attribute:: desc
--
--    Module description.
--
-- .. attribute:: aux_enable
--
--    Sequence of particle instances that require auxiliary variables
--    during sampling.
--
-- .. class:: writer(args)
--
--    Construct file writer.
--
--    :param table args: keyword arguments
--    :param args.file: instance of file writer
--    :param args.location: location within file
--    :type args.location: string table
--    :return: file writer as returned by ``file:writer()``.
--
--    The argument ``location`` specifies a path in a structured file format
--    like H5MD given as a table of strings. It defaults to ``args.location``
--    passed upon construction of the correlation module.
--
local M = module(function(args)
    local acquire   = utility.assert_kwarg(args, "acquire")
    local correlate = utility.assert_kwarg(args, "correlate")
    local shape     = utility.assert_type(args.shape or {}, "table")
    local location  = utility.assert_type(utility.assert_kwarg(args, "location"), "table")
    local desc      = utility.assert_type(utility.assert_kwarg(args, "desc"), "string")
    local aux_enable = utility.assert_type(args.aux_enable or {}, "table")

    -- ensure that acquire is a table
    if not (type(acquire) == "table") then
        acquire = { acquire }
    end
    -- convert Lua function(s) to C++ std::function(s)
    for i,v in ipairs(acquire) do
        acquire[i] = blocking_scheme_adaptor(v)
    end

    -- construct instance
    local self = correlation_adaptor(correlate, shape)

    -- attach acquire function(s) as read-only property
    self.acquire = property(function(self)
        return acquire
    end)

    -- attach module description
    self.desc = property(function(self)
        return desc
    end)

    -- attach writer function as property
    self.writer = property(function(self) return function(self, args)
        local file = utility.assert_kwarg(args, "file")
        local location = utility.assert_type(args.location or location, "table")

        local writer = file:writer({location = location, mode = "truncate"})
        return writer
    end end)

    self.aux_enable = property(function(self)
        return aux_enable
    end)

    return self
end)

return M
